import Foundation

enum engineState {
    case start, stop
}

enum windowState {
    case open, close
}

enum trunkState {
    case full, empty
}

struct oneCar {
    let brand : String
    let model : String
    var color : String
    mutating func cColor(a:String) {
        switch a {
        case "red":
            self.color = "red"
        case "white":
            self.color = "white"
        case "blue":
            self.color = "blue"
        case "black":
            self.color = "black"
        default:
            print("Error")
        }
    }
    let release : Int
    var trunkVol : Double {
        willSet {
            if (trunkState == .empty) && (trunkVol > 0) && (trunkVol != 0) && (newValue < trunkVol) {
                let space = trunkVol - newValue
                print ("\(brand)\(model) trunk free: \(space)")
            } else { print("Input error or \(brand)\(model) trunk is full.")}
        }
    }
    var engineState : engineState {
        willSet {
            if newValue == .start {
                print ("\(brand)\(model) engine is on")
            } else {print("\(brand)\(model) engine is off")}
        }
    }
    var windowState : windowState {
        willSet {
            if newValue == .open {
                print("\(brand)\(model) windows are open")
            } else { print("\(brand)\(model) windows are close") }
        }
    }
    var trunkState : trunkState
    mutating func emptyTrunck() {
        self.trunkState = .empty
        print ("\(brand)\(model) trunck is empty")
    }
}

struct someTruck {
    let brand : String
    let model : String
    var color : String
    mutating func changeColor(c:String) {
        switch c {
        case "white":
            self.color = "white"
        case "black":
            self.color = "black"
        case "red":
            self.color = "red"
        case "blue":
            self.color = "blue"
        default:
            print("Input error.")
        }
    }
    let release : Int
    var bodyVolume : Double {
        willSet {
            if (trunkState == .empty) && (bodyVolume > 0) && (bodyVolume != 0) && (newValue < bodyVolume) {
                let space = bodyVolume - newValue
                print ("\(brand)\(model) trunk free: \(space)")
            } else { print("Input error or \(brand)\(model) trunk is full.")}
        }
    }
    var engineState : engineState {
        willSet {
            if newValue == .start {
                print ("\(brand)\(model) engine is on")
            } else {print("\(brand)\(model) engine is off")}
        }
    }
    var windowState : windowState {
        willSet {
            if newValue == .open {
                print("\(brand)\(model) windows are open")
            } else { print("\(brand)\(model) windows are close") }
        }
    }
    var trunkState : trunkState
    mutating func emptyTrunck() {
        self.trunkState = .empty
        print ("\(brand)\(model) trunck is empty")
    }
}

var car1 = oneCar(brand: "Audi", model: "a5", color: "clear", release: 2010, trunkVol: 400.0 , engineState: .stop, windowState: .open, trunkState: .empty)
var car2 = oneCar(brand: "Honda", model: "Accord", color: "clear", release: 2007, trunkVol: 450.0, engineState: .stop, windowState: .close, trunkState: .full)

var truck1 = someTruck(brand: "Volvo", model: "FH", color: "clear", release: 2019, bodyVolume: 130000.0, engineState: .start, windowState: .open, trunkState: .full)
var truck2 = someTruck(brand: "Volvo", model: "FM", color: "clear", release: 2021, bodyVolume: 160000.0, engineState: .start, windowState: .close, trunkState: .empty)


car1.engineState = .start
car1.trunkVol = 340.0
car1.cColor(a: "red")
car2.trunkVol = 300.0
car2.windowState = .open
car2.cColor(a: "black")

truck1.engineState = .stop
truck1.windowState = .close
truck2.engineState = .stop
truck2.bodyVolume = 5678908


print ("Information about the first car: brand&model: \(car1.brand)\(car1.model), release: \(car1.release), color: \(String(describing: car1.color)), free trunkVolume: \(car1.trunkVol), engine is \(car1.engineState)")
